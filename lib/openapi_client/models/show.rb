=begin
#Streaming Availability API

#Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 60 countries!

The version of the OpenAPI document: 4.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module OpenapiClient
  # A show object represents a movie or a series. Type of the show is determined by the showType property, which is either movie or series. Based on this type, some properties are omitted, for example a movie does not have seasonCount and episodeCount properties.  Show object contains the details such as the title, overview, genres, cast, rating and images. You can find the streaming availability information under streamingOptions property. Each streaming option contains the service info, deep link, video quality, available audios and subtitles and more. It also includes the price if the show is available to buy or rent; and addon info if the show is available via an addon (such as Apple TV Channels, Prime Video Channels etc.).  You can also find the seasons of the series under the seasons property, and the episodes of a season under the episodes property of the season object. Via the streamingOptions property of seasons and episodes, you can get the individual streaming options of them. These streaming options include the same set of properties as the show streaming options, so you can use them to get deep links to episodes and seasons, and to see available audios and subtitles.  Note that seasons and episodes are not included in the search results unless you set the series_granularity parameter to seasons or episodes. For more info, check out the series_granularity parameter of the search endpoints.  There are multiple ways to retrieve shows. You can retrieve a show by its IMDb or TMDB id via [/shows/{id}](#get-a-show) endpoint; you can search shows by their title via [/shows/search/title](#search-shows-by-title) endpoint; and you can search shows by filters such as genres, release year, rating etc. via [/shows/search/filters](#search-shows-by-filters) endpoint. This endpoint also supports pagination and offers advanced ordering options such as ordering by popularity, rating, release year etc. 
  class Show
    # Type of the item. Always show.
    attr_accessor :item_type

    # Type of the show. Based on the type, some properties might be omitted.
    attr_accessor :show_type

    # Id of the show.
    attr_accessor :id

    # [IMDb](https://www.imdb.com/) id of the show.
    attr_accessor :imdb_id

    # [TMDB](https://www.themoviedb.org/) id of the show.
    attr_accessor :tmdb_id

    # Title of the show.
    attr_accessor :title

    # A brief overview of the overall plot of the show.
    attr_accessor :overview

    # The year that the movie was released.
    attr_accessor :release_year

    # The first year that the series aired.
    attr_accessor :first_air_year

    # The last year that the series aired.
    attr_accessor :last_air_year

    # Original title of the show.
    attr_accessor :original_title

    # Array of the genres of the show.
    attr_accessor :genres

    # Array of the directors of the movie.
    attr_accessor :directors

    # Array of the creators of the series.
    attr_accessor :creators

    # Array of the cast of the show.
    attr_accessor :cast

    # Rating of the show. This is calculated by taking the average of ratings found online from multiple sources.
    attr_accessor :rating

    # Number of seasons that are either aired or announced for a series.
    attr_accessor :season_count

    # Number of episodes that are either aired or announced for a series.
    attr_accessor :episode_count

    # Runtime of the movie in minutes.
    attr_accessor :runtime

    # Image set of the show.
    attr_accessor :image_set

    # Map of the streaming options by the country code.
    attr_accessor :streaming_options

    # Array of the seasons belong to the series.
    attr_accessor :seasons

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'item_type' => :'itemType',
        :'show_type' => :'showType',
        :'id' => :'id',
        :'imdb_id' => :'imdbId',
        :'tmdb_id' => :'tmdbId',
        :'title' => :'title',
        :'overview' => :'overview',
        :'release_year' => :'releaseYear',
        :'first_air_year' => :'firstAirYear',
        :'last_air_year' => :'lastAirYear',
        :'original_title' => :'originalTitle',
        :'genres' => :'genres',
        :'directors' => :'directors',
        :'creators' => :'creators',
        :'cast' => :'cast',
        :'rating' => :'rating',
        :'season_count' => :'seasonCount',
        :'episode_count' => :'episodeCount',
        :'runtime' => :'runtime',
        :'image_set' => :'imageSet',
        :'streaming_options' => :'streamingOptions',
        :'seasons' => :'seasons'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'item_type' => :'String',
        :'show_type' => :'ShowType',
        :'id' => :'String',
        :'imdb_id' => :'String',
        :'tmdb_id' => :'String',
        :'title' => :'String',
        :'overview' => :'String',
        :'release_year' => :'Integer',
        :'first_air_year' => :'Integer',
        :'last_air_year' => :'Integer',
        :'original_title' => :'String',
        :'genres' => :'Array<Genre>',
        :'directors' => :'Array<String>',
        :'creators' => :'Array<String>',
        :'cast' => :'Array<String>',
        :'rating' => :'Integer',
        :'season_count' => :'Integer',
        :'episode_count' => :'Integer',
        :'runtime' => :'Integer',
        :'image_set' => :'ShowImageSet',
        :'streaming_options' => :'Hash<String, Array<StreamingOption>>',
        :'seasons' => :'Array<Season>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Show` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Show`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'item_type')
        self.item_type = attributes[:'item_type']
      else
        self.item_type = nil
      end

      if attributes.key?(:'show_type')
        self.show_type = attributes[:'show_type']
      else
        self.show_type = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'imdb_id')
        self.imdb_id = attributes[:'imdb_id']
      else
        self.imdb_id = nil
      end

      if attributes.key?(:'tmdb_id')
        self.tmdb_id = attributes[:'tmdb_id']
      else
        self.tmdb_id = nil
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      else
        self.title = nil
      end

      if attributes.key?(:'overview')
        self.overview = attributes[:'overview']
      else
        self.overview = nil
      end

      if attributes.key?(:'release_year')
        self.release_year = attributes[:'release_year']
      end

      if attributes.key?(:'first_air_year')
        self.first_air_year = attributes[:'first_air_year']
      end

      if attributes.key?(:'last_air_year')
        self.last_air_year = attributes[:'last_air_year']
      end

      if attributes.key?(:'original_title')
        self.original_title = attributes[:'original_title']
      else
        self.original_title = nil
      end

      if attributes.key?(:'genres')
        if (value = attributes[:'genres']).is_a?(Array)
          self.genres = value
        end
      else
        self.genres = nil
      end

      if attributes.key?(:'directors')
        if (value = attributes[:'directors']).is_a?(Array)
          self.directors = value
        end
      end

      if attributes.key?(:'creators')
        if (value = attributes[:'creators']).is_a?(Array)
          self.creators = value
        end
      end

      if attributes.key?(:'cast')
        if (value = attributes[:'cast']).is_a?(Array)
          self.cast = value
        end
      else
        self.cast = nil
      end

      if attributes.key?(:'rating')
        self.rating = attributes[:'rating']
      else
        self.rating = nil
      end

      if attributes.key?(:'season_count')
        self.season_count = attributes[:'season_count']
      end

      if attributes.key?(:'episode_count')
        self.episode_count = attributes[:'episode_count']
      end

      if attributes.key?(:'runtime')
        self.runtime = attributes[:'runtime']
      end

      if attributes.key?(:'image_set')
        self.image_set = attributes[:'image_set']
      else
        self.image_set = nil
      end

      if attributes.key?(:'streaming_options')
        if (value = attributes[:'streaming_options']).is_a?(Hash)
          self.streaming_options = value
        end
      else
        self.streaming_options = nil
      end

      if attributes.key?(:'seasons')
        if (value = attributes[:'seasons']).is_a?(Array)
          self.seasons = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @item_type.nil?
        invalid_properties.push('invalid value for "item_type", item_type cannot be nil.')
      end

      if @show_type.nil?
        invalid_properties.push('invalid value for "show_type", show_type cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @imdb_id.nil?
        invalid_properties.push('invalid value for "imdb_id", imdb_id cannot be nil.')
      end

      if @tmdb_id.nil?
        invalid_properties.push('invalid value for "tmdb_id", tmdb_id cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @overview.nil?
        invalid_properties.push('invalid value for "overview", overview cannot be nil.')
      end

      if @original_title.nil?
        invalid_properties.push('invalid value for "original_title", original_title cannot be nil.')
      end

      if @genres.nil?
        invalid_properties.push('invalid value for "genres", genres cannot be nil.')
      end

      if @cast.nil?
        invalid_properties.push('invalid value for "cast", cast cannot be nil.')
      end

      if @rating.nil?
        invalid_properties.push('invalid value for "rating", rating cannot be nil.')
      end

      if @rating > 100
        invalid_properties.push('invalid value for "rating", must be smaller than or equal to 100.')
      end

      if @rating < 0
        invalid_properties.push('invalid value for "rating", must be greater than or equal to 0.')
      end

      if @image_set.nil?
        invalid_properties.push('invalid value for "image_set", image_set cannot be nil.')
      end

      if @streaming_options.nil?
        invalid_properties.push('invalid value for "streaming_options", streaming_options cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @item_type.nil?
      item_type_validator = EnumAttributeValidator.new('String', ["show"])
      return false unless item_type_validator.valid?(@item_type)
      return false if @show_type.nil?
      return false if @id.nil?
      return false if @imdb_id.nil?
      return false if @tmdb_id.nil?
      return false if @title.nil?
      return false if @overview.nil?
      return false if @original_title.nil?
      return false if @genres.nil?
      return false if @cast.nil?
      return false if @rating.nil?
      return false if @rating > 100
      return false if @rating < 0
      return false if @image_set.nil?
      return false if @streaming_options.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_type Object to be assigned
    def item_type=(item_type)
      validator = EnumAttributeValidator.new('String', ["show"])
      unless validator.valid?(item_type)
        fail ArgumentError, "invalid value for \"item_type\", must be one of #{validator.allowable_values}."
      end
      @item_type = item_type
    end

    # Custom attribute writer method with validation
    # @param [Object] show_type Value to be assigned
    def show_type=(show_type)
      if show_type.nil?
        fail ArgumentError, 'show_type cannot be nil'
      end

      @show_type = show_type
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] imdb_id Value to be assigned
    def imdb_id=(imdb_id)
      if imdb_id.nil?
        fail ArgumentError, 'imdb_id cannot be nil'
      end

      @imdb_id = imdb_id
    end

    # Custom attribute writer method with validation
    # @param [Object] tmdb_id Value to be assigned
    def tmdb_id=(tmdb_id)
      if tmdb_id.nil?
        fail ArgumentError, 'tmdb_id cannot be nil'
      end

      @tmdb_id = tmdb_id
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if title.nil?
        fail ArgumentError, 'title cannot be nil'
      end

      @title = title
    end

    # Custom attribute writer method with validation
    # @param [Object] overview Value to be assigned
    def overview=(overview)
      if overview.nil?
        fail ArgumentError, 'overview cannot be nil'
      end

      @overview = overview
    end

    # Custom attribute writer method with validation
    # @param [Object] original_title Value to be assigned
    def original_title=(original_title)
      if original_title.nil?
        fail ArgumentError, 'original_title cannot be nil'
      end

      @original_title = original_title
    end

    # Custom attribute writer method with validation
    # @param [Object] genres Value to be assigned
    def genres=(genres)
      if genres.nil?
        fail ArgumentError, 'genres cannot be nil'
      end

      @genres = genres
    end

    # Custom attribute writer method with validation
    # @param [Object] cast Value to be assigned
    def cast=(cast)
      if cast.nil?
        fail ArgumentError, 'cast cannot be nil'
      end

      @cast = cast
    end

    # Custom attribute writer method with validation
    # @param [Object] rating Value to be assigned
    def rating=(rating)
      if rating.nil?
        fail ArgumentError, 'rating cannot be nil'
      end

      if rating > 100
        fail ArgumentError, 'invalid value for "rating", must be smaller than or equal to 100.'
      end

      if rating < 0
        fail ArgumentError, 'invalid value for "rating", must be greater than or equal to 0.'
      end

      @rating = rating
    end

    # Custom attribute writer method with validation
    # @param [Object] image_set Value to be assigned
    def image_set=(image_set)
      if image_set.nil?
        fail ArgumentError, 'image_set cannot be nil'
      end

      @image_set = image_set
    end

    # Custom attribute writer method with validation
    # @param [Object] streaming_options Value to be assigned
    def streaming_options=(streaming_options)
      if streaming_options.nil?
        fail ArgumentError, 'streaming_options cannot be nil'
      end

      @streaming_options = streaming_options
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          item_type == o.item_type &&
          show_type == o.show_type &&
          id == o.id &&
          imdb_id == o.imdb_id &&
          tmdb_id == o.tmdb_id &&
          title == o.title &&
          overview == o.overview &&
          release_year == o.release_year &&
          first_air_year == o.first_air_year &&
          last_air_year == o.last_air_year &&
          original_title == o.original_title &&
          genres == o.genres &&
          directors == o.directors &&
          creators == o.creators &&
          cast == o.cast &&
          rating == o.rating &&
          season_count == o.season_count &&
          episode_count == o.episode_count &&
          runtime == o.runtime &&
          image_set == o.image_set &&
          streaming_options == o.streaming_options &&
          seasons == o.seasons
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [item_type, show_type, id, imdb_id, tmdb_id, title, overview, release_year, first_air_year, last_air_year, original_title, genres, directors, creators, cast, rating, season_count, episode_count, runtime, image_set, streaming_options, seasons].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
