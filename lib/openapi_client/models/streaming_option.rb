=begin
#Streaming Availability API

#Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 60 countries!

The version of the OpenAPI document: 4.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module OpenapiClient
  # A streaming option.
  class StreamingOption
    attr_accessor :service

    attr_accessor :type

    # Addon that the streaming option is available through. Omitted if the streaming option is not available through an addon. 
    attr_accessor :addon

    # Deep link to the streaming option's page in the web app of the streaming service. Unlike videoLink, this field is guaranteed to be populated. 
    attr_accessor :link

    # Deep link to the video associated with the streaming option. Omitted if there's no direct link to the video. Might have the same value as link. 
    attr_accessor :video_link

    # Maximum supported video quality of the streaming option.
    attr_accessor :quality

    # Array of the available audios.
    attr_accessor :audios

    # Array of the available subtitles.
    attr_accessor :subtitles

    attr_accessor :price

    # Whether the streaming option expires within a month.
    attr_accessor :expires_soon

    # [Unix Time Stamp](https://www.unixtimestamp.com/) of the date that the streaming option is expiring. In other words, last day to watch. 
    attr_accessor :expires_on

    # [Unix Time Stamp](https://www.unixtimestamp.com/) of the date that this streaming option was detected. 
    attr_accessor :available_since

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'service' => :'service',
        :'type' => :'type',
        :'addon' => :'addon',
        :'link' => :'link',
        :'video_link' => :'videoLink',
        :'quality' => :'quality',
        :'audios' => :'audios',
        :'subtitles' => :'subtitles',
        :'price' => :'price',
        :'expires_soon' => :'expiresSoon',
        :'expires_on' => :'expiresOn',
        :'available_since' => :'availableSince'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'service' => :'ServiceInfo',
        :'type' => :'StreamingOptionType',
        :'addon' => :'Addon',
        :'link' => :'String',
        :'video_link' => :'String',
        :'quality' => :'String',
        :'audios' => :'Array<Locale>',
        :'subtitles' => :'Array<Subtitle>',
        :'price' => :'Price',
        :'expires_soon' => :'Boolean',
        :'expires_on' => :'Integer',
        :'available_since' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::StreamingOption` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::StreamingOption`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      else
        self.service = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'addon')
        self.addon = attributes[:'addon']
      end

      if attributes.key?(:'link')
        self.link = attributes[:'link']
      else
        self.link = nil
      end

      if attributes.key?(:'video_link')
        self.video_link = attributes[:'video_link']
      end

      if attributes.key?(:'quality')
        self.quality = attributes[:'quality']
      end

      if attributes.key?(:'audios')
        if (value = attributes[:'audios']).is_a?(Array)
          self.audios = value
        end
      else
        self.audios = nil
      end

      if attributes.key?(:'subtitles')
        if (value = attributes[:'subtitles']).is_a?(Array)
          self.subtitles = value
        end
      else
        self.subtitles = nil
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'expires_soon')
        self.expires_soon = attributes[:'expires_soon']
      else
        self.expires_soon = nil
      end

      if attributes.key?(:'expires_on')
        self.expires_on = attributes[:'expires_on']
      end

      if attributes.key?(:'available_since')
        self.available_since = attributes[:'available_since']
      else
        self.available_since = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @service.nil?
        invalid_properties.push('invalid value for "service", service cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @link.nil?
        invalid_properties.push('invalid value for "link", link cannot be nil.')
      end

      if @audios.nil?
        invalid_properties.push('invalid value for "audios", audios cannot be nil.')
      end

      if @subtitles.nil?
        invalid_properties.push('invalid value for "subtitles", subtitles cannot be nil.')
      end

      if @expires_soon.nil?
        invalid_properties.push('invalid value for "expires_soon", expires_soon cannot be nil.')
      end

      if @available_since.nil?
        invalid_properties.push('invalid value for "available_since", available_since cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @service.nil?
      return false if @type.nil?
      return false if @link.nil?
      quality_validator = EnumAttributeValidator.new('String', ["sd", "hd", "qhd", "uhd"])
      return false unless quality_validator.valid?(@quality)
      return false if @audios.nil?
      return false if @subtitles.nil?
      return false if @expires_soon.nil?
      return false if @available_since.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] service Value to be assigned
    def service=(service)
      if service.nil?
        fail ArgumentError, 'service cannot be nil'
      end

      @service = service
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if type.nil?
        fail ArgumentError, 'type cannot be nil'
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] link Value to be assigned
    def link=(link)
      if link.nil?
        fail ArgumentError, 'link cannot be nil'
      end

      @link = link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quality Object to be assigned
    def quality=(quality)
      validator = EnumAttributeValidator.new('String', ["sd", "hd", "qhd", "uhd"])
      unless validator.valid?(quality)
        fail ArgumentError, "invalid value for \"quality\", must be one of #{validator.allowable_values}."
      end
      @quality = quality
    end

    # Custom attribute writer method with validation
    # @param [Object] audios Value to be assigned
    def audios=(audios)
      if audios.nil?
        fail ArgumentError, 'audios cannot be nil'
      end

      @audios = audios
    end

    # Custom attribute writer method with validation
    # @param [Object] subtitles Value to be assigned
    def subtitles=(subtitles)
      if subtitles.nil?
        fail ArgumentError, 'subtitles cannot be nil'
      end

      @subtitles = subtitles
    end

    # Custom attribute writer method with validation
    # @param [Object] expires_soon Value to be assigned
    def expires_soon=(expires_soon)
      if expires_soon.nil?
        fail ArgumentError, 'expires_soon cannot be nil'
      end

      @expires_soon = expires_soon
    end

    # Custom attribute writer method with validation
    # @param [Object] available_since Value to be assigned
    def available_since=(available_since)
      if available_since.nil?
        fail ArgumentError, 'available_since cannot be nil'
      end

      @available_since = available_since
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          service == o.service &&
          type == o.type &&
          addon == o.addon &&
          link == o.link &&
          video_link == o.video_link &&
          quality == o.quality &&
          audios == o.audios &&
          subtitles == o.subtitles &&
          price == o.price &&
          expires_soon == o.expires_soon &&
          expires_on == o.expires_on &&
          available_since == o.available_since
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [service, type, addon, link, video_link, quality, audios, subtitles, price, expires_soon, expires_on, available_since].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
